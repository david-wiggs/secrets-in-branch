name: Check Secret Scanning Alerts in Branch

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to check for secrets'
        required: true
        default: 'main'
        type: string
      repository:
        description: 'Repository to check (owner/repo format)'
        required: false
        type: string
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  GH_TOKEN: ${{ secrets.SECRET_SCANNING_TOKEN }}

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set repository variable
        id: repo-info
        run: |
          if [ -n "${{ github.event.inputs.repository }}" ]; then
            echo "repository=${{ github.event.inputs.repository }}" >> $GITHUB_OUTPUT
          else
            echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "${{ github.event.inputs.branch }}" ]; then
            echo "branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Get secret scanning alerts
        id: get-alerts
        run: |
          REPO="${{ steps.repo-info.outputs.repository }}"
          echo "Getting secret scanning alerts for repository: $REPO"
          
          # Get all open secret scanning alerts
          ALERTS=$(gh api repos/$REPO/secret-scanning/alerts --paginate --jq '.[].number' 2>/dev/null || echo "")
          
          if [ -z "$ALERTS" ]; then
            echo "No secret scanning alerts found or insufficient permissions"
            echo "alerts=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Convert to comma-separated list
          ALERT_LIST=$(echo "$ALERTS" | tr '\n' ',' | sed 's/,$//')
          echo "Found alerts: $ALERT_LIST"
          echo "alerts=$ALERT_LIST" >> $GITHUB_OUTPUT
      
      - name: Check secrets in branch
        if: steps.get-alerts.outputs.alerts != ''
        id: check-secrets
        run: |
          # Set bash to continue on error to prevent workflow failure
          set +e
          
          REPO="${{ steps.repo-info.outputs.repository }}"
          BRANCH="${{ steps.repo-info.outputs.branch }}"
          ALERTS="${{ steps.get-alerts.outputs.alerts }}"
          
          echo "Checking secrets in branch: $BRANCH"
          echo "Repository: $REPO"
          echo "Alert numbers: $ALERTS"
          
          # Create results file
          RESULTS_FILE="secret-check-results.json"
          echo '[]' > $RESULTS_FILE
          
          # Process each alert
          IFS=',' read -ra ALERT_ARRAY <<< "$ALERTS"
          for ALERT_NUM in "${ALERT_ARRAY[@]}"; do
            echo "Processing alert #$ALERT_NUM"
            
            # Get alert details with error handling
            ALERT_DETAILS=$(gh api repos/$REPO/secret-scanning/alerts/$ALERT_NUM 2>/dev/null)
            if [ $? -ne 0 ]; then
              echo "  ⚠️ Warning: Could not fetch alert #$ALERT_NUM details, skipping..."
              continue
            fi
            
            SECRET_TYPE=$(echo "$ALERT_DETAILS" | jq -r '.secret_type // "unknown"' 2>/dev/null)
            STATE=$(echo "$ALERT_DETAILS" | jq -r '.state // "unknown"' 2>/dev/null)
            
            echo "  Alert #$ALERT_NUM: $SECRET_TYPE (state: $STATE)"
            
            # Get alert locations with error handling
            LOCATIONS=$(gh api repos/$REPO/secret-scanning/alerts/$ALERT_NUM/locations --paginate 2>/dev/null)
            if [ $? -ne 0 ]; then
              echo "  ⚠️ Warning: Could not fetch locations for alert #$ALERT_NUM, skipping..."
              continue
            fi
            
            # Process each location with error handling
            echo "$LOCATIONS" | jq -c '.[]' | while read -r location; do
              LOCATION_TYPE=$(echo "$location" | jq -r '.type')
              
              if [ "$LOCATION_TYPE" = "commit" ]; then
                FILE_PATH=$(echo "$location" | jq -r '.details.path')
                START_LINE=$(echo "$location" | jq -r '.details.start_line')
                END_LINE=$(echo "$location" | jq -r '.details.end_line')
                START_COLUMN=$(echo "$location" | jq -r '.details.start_column')
                END_COLUMN=$(echo "$location" | jq -r '.details.end_column')
                
                echo "  Checking file: $FILE_PATH (lines $START_LINE-$END_LINE, cols $START_COLUMN-$END_COLUMN)"
                
                # Get current file content with comprehensive error handling
                CURRENT_CONTENT=""
                echo "  Attempting to fetch file: $FILE_PATH from branch: $BRANCH"
                
                # Check if file exists and get detailed error information
                FILE_API_RESPONSE=$(gh api repos/$REPO/contents/$FILE_PATH?ref=$BRANCH 2>&1)
                FILE_API_EXIT_CODE=$?
                
                if [ $FILE_API_EXIT_CODE -eq 0 ]; then
                  echo "  ✓ File found, extracting content..."
                  
                  # Check if response contains content field
                  if echo "$FILE_API_RESPONSE" | jq -e '.content' >/dev/null 2>&1; then
                    CURRENT_CONTENT=$(echo "$FILE_API_RESPONSE" | jq -r '.content' | base64 -d 2>/dev/null)
                    DECODE_EXIT_CODE=$?
                    
                    if [ $DECODE_EXIT_CODE -eq 0 ] && [ -n "$CURRENT_CONTENT" ]; then
                      echo "  ✓ Content decoded successfully (${#CURRENT_CONTENT} characters)"
                      
                      # Check if file has enough lines
                      TOTAL_LINES=$(echo "$CURRENT_CONTENT" | wc -l)
                      echo "  File has $TOTAL_LINES lines, need lines $START_LINE-$END_LINE"
                      
                      if [ "$TOTAL_LINES" -ge "$END_LINE" ]; then
                        SECRET_CONTENT=$(echo "$CURRENT_CONTENT" | sed -n "${START_LINE},${END_LINE}p" | cut -c${START_COLUMN}-${END_COLUMN})
                        
                        if [ -n "$SECRET_CONTENT" ]; then
                          echo "  ✓ Secret content extracted (${#SECRET_CONTENT} characters)"
                          
                          # Create result entry
                          RESULT=$(jq -n \
                            --arg alert_num "$ALERT_NUM" \
                            --arg secret_type "$SECRET_TYPE" \
                            --arg state "$STATE" \
                            --arg file_path "$FILE_PATH" \
                            --arg start_line "$START_LINE" \
                            --arg end_line "$END_LINE" \
                            --arg start_column "$START_COLUMN" \
                            --arg end_column "$END_COLUMN" \
                            --arg branch "$BRANCH" \
                            --arg secret_found "true" \
                            --arg secret_content "$SECRET_CONTENT" \
                            '{
                              alert_number: $alert_num,
                              secret_type: $secret_type,
                              state: $state,
                              file_path: $file_path,
                              start_line: $start_line,
                              end_line: $end_line,
                              start_column: $start_column,
                              end_column: $end_column,
                              branch: $branch,
                              secret_found: $secret_found,
                              secret_content: $secret_content
                            }')
                          
                          echo "  ✓ Secret still present in $BRANCH"
                        else
                          echo "  ✗ No content found at specified columns $START_COLUMN-$END_COLUMN"
                          RESULT=$(jq -n \
                            --arg alert_num "$ALERT_NUM" \
                            --arg secret_type "$SECRET_TYPE" \
                            --arg state "$STATE" \
                            --arg file_path "$FILE_PATH" \
                            --arg branch "$BRANCH" \
                            --arg secret_found "false" \
                            --arg reason "no_content_at_columns" \
                            '{
                              alert_number: $alert_num,
                              secret_type: $secret_type,
                              state: $state,
                              file_path: $file_path,
                              branch: $branch,
                              secret_found: $secret_found,
                              reason: $reason
                            }')
                        fi
                      else
                        echo "  ✗ File only has $TOTAL_LINES lines, but alert expects line $END_LINE"
                        RESULT=$(jq -n \
                          --arg alert_num "$ALERT_NUM" \
                          --arg secret_type "$SECRET_TYPE" \
                          --arg state "$STATE" \
                          --arg file_path "$FILE_PATH" \
                          --arg branch "$BRANCH" \
                          --arg secret_found "false" \
                          --arg reason "insufficient_lines" \
                          --arg details "File has $TOTAL_LINES lines, need $END_LINE" \
                          '{
                            alert_number: $alert_num,
                            secret_type: $secret_type,
                            state: $state,
                            file_path: $file_path,
                            branch: $branch,
                            secret_found: $secret_found,
                            reason: $reason,
                            details: $details
                          }')
                      fi
                    else
                      echo "  ✗ Failed to decode base64 content (exit code: $DECODE_EXIT_CODE)"
                      RESULT=$(jq -n \
                        --arg alert_num "$ALERT_NUM" \
                        --arg secret_type "$SECRET_TYPE" \
                        --arg state "$STATE" \
                        --arg file_path "$FILE_PATH" \
                        --arg branch "$BRANCH" \
                        --arg secret_found "false" \
                        --arg reason "base64_decode_failed" \
                        '{
                          alert_number: $alert_num,
                          secret_type: $secret_type,
                          state: $state,
                          file_path: $file_path,
                          branch: $branch,
                          secret_found: $secret_found,
                          reason: $reason
                        }')
                    fi
                  else
                    echo "  ✗ API response does not contain content field"
                    echo "  Response type: $(echo "$FILE_API_RESPONSE" | jq -r '.type // "unknown"')"
                    RESULT=$(jq -n \
                      --arg alert_num "$ALERT_NUM" \
                      --arg secret_type "$SECRET_TYPE" \
                      --arg state "$STATE" \
                      --arg file_path "$FILE_PATH" \
                      --arg branch "$BRANCH" \
                      --arg secret_found "false" \
                      --arg reason "no_content_field" \
                      --arg details "$(echo "$FILE_API_RESPONSE" | jq -r '.type // "unknown"')" \
                      '{
                        alert_number: $alert_num,
                        secret_type: $secret_type,
                        state: $state,
                        file_path: $file_path,
                        branch: $branch,
                        secret_found: $secret_found,
                        reason: $reason,
                        details: $details
                      }')
                  fi
                else
                  echo "  ✗ File not found in branch $BRANCH"
                  echo "  API Error: $(echo "$FILE_API_RESPONSE" | head -1)"
                  
                  # Determine specific error reason
                  if echo "$FILE_API_RESPONSE" | grep -q "404"; then
                    ERROR_REASON="file_not_found"
                    ERROR_DETAILS="HTTP 404 - File does not exist in branch"
                  elif echo "$FILE_API_RESPONSE" | grep -q "403"; then
                    ERROR_REASON="access_denied"
                    ERROR_DETAILS="HTTP 403 - Access denied"
                  elif echo "$FILE_API_RESPONSE" | grep -q "401"; then
                    ERROR_REASON="authentication_failed"
                    ERROR_DETAILS="HTTP 401 - Authentication failed"
                  else
                    ERROR_REASON="api_error"
                    ERROR_DETAILS="$(echo "$FILE_API_RESPONSE" | head -1)"
                  fi
                  
                  # Create result entry for missing file
                  RESULT=$(jq -n \
                    --arg alert_num "$ALERT_NUM" \
                    --arg secret_type "$SECRET_TYPE" \
                    --arg state "$STATE" \
                    --arg file_path "$FILE_PATH" \
                    --arg branch "$BRANCH" \
                    --arg secret_found "false" \
                    --arg reason "$ERROR_REASON" \
                    --arg details "$ERROR_DETAILS" \
                    '{
                      alert_number: $alert_num,
                      secret_type: $secret_type,
                      state: $state,
                      file_path: $file_path,
                      branch: $branch,
                      secret_found: $secret_found,
                      reason: $reason,
                      details: $details
                    }')
                fi
                
                # Append result to results file
                if [ -n "$RESULT" ]; then
                  jq ". += [$RESULT]" $RESULTS_FILE > temp.json && mv temp.json $RESULTS_FILE
                fi
              fi
            done
          done
          
          echo "Results saved to $RESULTS_FILE"
          
          # Set output for whether secrets were found
          if [ -f "$RESULTS_FILE" ]; then
            SECRETS_FOUND_COUNT=$(jq '[.[] | select(.secret_found == "true")] | length' $RESULTS_FILE)
            if [ "$SECRETS_FOUND_COUNT" -gt 0 ]; then
              echo "secrets_found=true" >> $GITHUB_OUTPUT
            else
              echo "secrets_found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "secrets_found=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate summary report
        if: steps.get-alerts.outputs.alerts != ''
        id: generate-summary
        run: |
          RESULTS_FILE="secret-check-results.json"
          BRANCH="${{ steps.repo-info.outputs.branch }}"
          
          if [ -f "$RESULTS_FILE" ]; then
            echo "## Secret Scanning Alert Summary for branch: $BRANCH" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            TOTAL_ALERTS=$(jq '. | length' $RESULTS_FILE)
            SECRETS_FOUND=$(jq '[.[] | select(.secret_found == "true")] | length' $RESULTS_FILE)
            SECRETS_NOT_FOUND=$(jq '[.[] | select(.secret_found == "false")] | length' $RESULTS_FILE)
            
            echo "- **Total locations checked**: $TOTAL_ALERTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Secrets still present**: $SECRETS_FOUND" >> $GITHUB_STEP_SUMMARY
            echo "- **Secrets not found**: $SECRETS_NOT_FOUND" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$SECRETS_FOUND" -gt 0 ]; then
              echo "### 🚨 Secrets Still Present" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Alert # | Secret Type | File Path | Lines | Status |" >> $GITHUB_STEP_SUMMARY
              echo "|---------|-------------|-----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
              
              jq -r '.[] | select(.secret_found == "true") | "| \(.alert_number) | \(.secret_type) | \(.file_path) | \(.start_line)-\(.end_line) | ⚠️ Present |"' $RESULTS_FILE >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "$SECRETS_NOT_FOUND" -gt 0 ]; then
              echo "### ✅ Secrets Not Found" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Alert # | Secret Type | File Path | Reason | Details |" >> $GITHUB_STEP_SUMMARY
              echo "|---------|-------------|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
              
              jq -r '.[] | select(.secret_found == "false") | "| \(.alert_number) | \(.secret_type) | \(.file_path) | \(.reason // "removed") | \(.details // "N/A") |"' $RESULTS_FILE >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Set output for final step
            if [ "$SECRETS_FOUND" -gt 0 ]; then
              echo "secrets_found=true" >> $GITHUB_OUTPUT
              echo "::warning::Found $SECRETS_FOUND secret(s) still present in branch $BRANCH"
            else
              echo "secrets_found=false" >> $GITHUB_OUTPUT
              echo "::notice::No secrets found in branch $BRANCH"
            fi
          else
            echo "No results file found" >> $GITHUB_STEP_SUMMARY
            echo "secrets_found=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload results as artifact
        if: steps.get-alerts.outputs.alerts != ''
        uses: actions/upload-artifact@v4
        with:
          name: secret-check-results-${{ steps.repo-info.outputs.branch }}
          path: secret-check-results.json
          retention-days: 30
      
      - name: Fail if secrets found
        if: steps.generate-summary.outputs.secrets_found == 'true'
        run: |
          echo "::error::Secrets were found in branch ${{ steps.repo-info.outputs.branch }}. Please review the summary above."
          exit 1
